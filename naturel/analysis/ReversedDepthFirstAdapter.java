/* This file was generated by SableCC (http://www.sablecc.org/). */

package naturel.analysis;

import java.util.*;
import naturel.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPNaturel().apply(this);
        outStart(node);
    }

    public void inANaturel(ANaturel node)
    {
        defaultIn(node);
    }

    public void outANaturel(ANaturel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANaturel(ANaturel node)
    {
        inANaturel(node);
        {
            List<PClass> copy = new ArrayList<PClass>(node.getClasses());
            Collections.reverse(copy);
            for(PClass e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PImport> copy = new ArrayList<PImport>(node.getUses());
            Collections.reverse(copy);
            for(PImport e : copy)
            {
                e.apply(this);
            }
        }
        outANaturel(node);
    }

    public void inAOneOptionalIdentifier(AOneOptionalIdentifier node)
    {
        defaultIn(node);
    }

    public void outAOneOptionalIdentifier(AOneOptionalIdentifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneOptionalIdentifier(AOneOptionalIdentifier node)
    {
        inAOneOptionalIdentifier(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAOneOptionalIdentifier(node);
    }

    public void inANoneOptionalIdentifier(ANoneOptionalIdentifier node)
    {
        defaultIn(node);
    }

    public void outANoneOptionalIdentifier(ANoneOptionalIdentifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoneOptionalIdentifier(ANoneOptionalIdentifier node)
    {
        inANoneOptionalIdentifier(node);
        outANoneOptionalIdentifier(node);
    }

    public void inAImport(AImport node)
    {
        defaultIn(node);
    }

    public void outAImport(AImport node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImport(AImport node)
    {
        inAImport(node);
        if(node.getAs() != null)
        {
            node.getAs().apply(this);
        }
        {
            List<TIdentifier> copy = new ArrayList<TIdentifier>(node.getName());
            Collections.reverse(copy);
            for(TIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAImport(node);
    }

    public void inAClass(AClass node)
    {
        defaultIn(node);
    }

    public void outAClass(AClass node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClass(AClass node)
    {
        inAClass(node);
        {
            List<PMethod> copy = new ArrayList<PMethod>(node.getMethods());
            Collections.reverse(copy);
            for(PMethod e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDeclaration> copy = new ArrayList<PDeclaration>(node.getVars());
            Collections.reverse(copy);
            for(PDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PInterface> copy = new ArrayList<PInterface>(node.getInterfaces());
            Collections.reverse(copy);
            for(PInterface e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<TIdentifier> copy = new ArrayList<TIdentifier>(node.getSuper());
            Collections.reverse(copy);
            for(TIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<TIdentifier> copy = new ArrayList<TIdentifier>(node.getName());
            Collections.reverse(copy);
            for(TIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getModifier() != null)
        {
            node.getModifier().apply(this);
        }
        outAClass(node);
    }

    public void inAInterfaceInterface(AInterfaceInterface node)
    {
        defaultIn(node);
    }

    public void outAInterfaceInterface(AInterfaceInterface node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterfaceInterface(AInterfaceInterface node)
    {
        inAInterfaceInterface(node);
        {
            List<TIdentifier> copy = new ArrayList<TIdentifier>(node.getName());
            Collections.reverse(copy);
            for(TIdentifier e : copy)
            {
                e.apply(this);
            }
        }
        outAInterfaceInterface(node);
    }

    public void inAPublModifier(APublModifier node)
    {
        defaultIn(node);
    }

    public void outAPublModifier(APublModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPublModifier(APublModifier node)
    {
        inAPublModifier(node);
        outAPublModifier(node);
    }

    public void inAPrivModifier(APrivModifier node)
    {
        defaultIn(node);
    }

    public void outAPrivModifier(APrivModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrivModifier(APrivModifier node)
    {
        inAPrivModifier(node);
        outAPrivModifier(node);
    }

    public void inAProtModifier(AProtModifier node)
    {
        defaultIn(node);
    }

    public void outAProtModifier(AProtModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProtModifier(AProtModifier node)
    {
        inAProtModifier(node);
        outAProtModifier(node);
    }

    public void inAPublStatModifier(APublStatModifier node)
    {
        defaultIn(node);
    }

    public void outAPublStatModifier(APublStatModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPublStatModifier(APublStatModifier node)
    {
        inAPublStatModifier(node);
        outAPublStatModifier(node);
    }

    public void inAPrivStatModifier(APrivStatModifier node)
    {
        defaultIn(node);
    }

    public void outAPrivStatModifier(APrivStatModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrivStatModifier(APrivStatModifier node)
    {
        inAPrivStatModifier(node);
        outAPrivStatModifier(node);
    }

    public void inAProtStatModifier(AProtStatModifier node)
    {
        defaultIn(node);
    }

    public void outAProtStatModifier(AProtStatModifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProtStatModifier(AProtStatModifier node)
    {
        inAProtStatModifier(node);
        outAProtStatModifier(node);
    }

    public void inAMethod(AMethod node)
    {
        defaultIn(node);
    }

    public void outAMethod(AMethod node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethod(AMethod node)
    {
        inAMethod(node);
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        {
            List<PVariable> copy = new ArrayList<PVariable>(node.getParams());
            Collections.reverse(copy);
            for(PVariable e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getModifier() != null)
        {
            node.getModifier().apply(this);
        }
        outAMethod(node);
    }

    public void inADeclaration(ADeclaration node)
    {
        defaultIn(node);
    }

    public void outADeclaration(ADeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaration(ADeclaration node)
    {
        inADeclaration(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getModifier() != null)
        {
            node.getModifier().apply(this);
        }
        outADeclaration(node);
    }

    public void inAUnnamedVariable(AUnnamedVariable node)
    {
        defaultIn(node);
    }

    public void outAUnnamedVariable(AUnnamedVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnnamedVariable(AUnnamedVariable node)
    {
        inAUnnamedVariable(node);
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAUnnamedVariable(node);
    }

    public void inANamedVariable(ANamedVariable node)
    {
        defaultIn(node);
    }

    public void outANamedVariable(ANamedVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANamedVariable(ANamedVariable node)
    {
        inANamedVariable(node);
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outANamedVariable(node);
    }

    public void inATrueFlag(ATrueFlag node)
    {
        defaultIn(node);
    }

    public void outATrueFlag(ATrueFlag node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueFlag(ATrueFlag node)
    {
        inATrueFlag(node);
        outATrueFlag(node);
    }

    public void inAFalseFlag(AFalseFlag node)
    {
        defaultIn(node);
    }

    public void outAFalseFlag(AFalseFlag node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseFlag(AFalseFlag node)
    {
        inAFalseFlag(node);
        outAFalseFlag(node);
    }

    public void inATypeType(ATypeType node)
    {
        defaultIn(node);
    }

    public void outATypeType(ATypeType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeType(ATypeType node)
    {
        inATypeType(node);
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outATypeType(node);
    }

    public void inATupleType(ATupleType node)
    {
        defaultIn(node);
    }

    public void outATupleType(ATupleType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATupleType(ATupleType node)
    {
        inATupleType(node);
        if(node.getArray() != null)
        {
            node.getArray().apply(this);
        }
        {
            List<PVariable> copy = new ArrayList<PVariable>(node.getVars());
            Collections.reverse(copy);
            for(PVariable e : copy)
            {
                e.apply(this);
            }
        }
        outATupleType(node);
    }

    public void inADefaultType(ADefaultType node)
    {
        defaultIn(node);
    }

    public void outADefaultType(ADefaultType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultType(ADefaultType node)
    {
        inADefaultType(node);
        outADefaultType(node);
    }

    public void inABlock(ABlock node)
    {
        defaultIn(node);
    }

    public void outABlock(ABlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        inABlock(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatements());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        outABlock(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAAssignmentStatement(AAssignmentStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStatement(AAssignmentStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStatement(AAssignmentStatement node)
    {
        inAAssignmentStatement(node);
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignmentStatement(node);
    }

    public void inADeclarationStatement(ADeclarationStatement node)
    {
        defaultIn(node);
    }

    public void outADeclarationStatement(ADeclarationStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationStatement(ADeclarationStatement node)
    {
        inADeclarationStatement(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outADeclarationStatement(node);
    }

    public void inAExpStatement(AExpStatement node)
    {
        defaultIn(node);
    }

    public void outAExpStatement(AExpStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpStatement(AExpStatement node)
    {
        inAExpStatement(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpStatement(node);
    }

    public void inAPlusExp(APlusExp node)
    {
        defaultIn(node);
    }

    public void outAPlusExp(APlusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExp(APlusExp node)
    {
        inAPlusExp(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAPlusExp(node);
    }

    public void inAMinusExp(AMinusExp node)
    {
        defaultIn(node);
    }

    public void outAMinusExp(AMinusExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExp(AMinusExp node)
    {
        inAMinusExp(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMinusExp(node);
    }

    public void inADivExp(ADivExp node)
    {
        defaultIn(node);
    }

    public void outADivExp(ADivExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp(ADivExp node)
    {
        inADivExp(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outADivExp(node);
    }

    public void inAMultExp(AMultExp node)
    {
        defaultIn(node);
    }

    public void outAMultExp(AMultExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExp(AMultExp node)
    {
        inAMultExp(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAMultExp(node);
    }

    public void inAModExp(AModExp node)
    {
        defaultIn(node);
    }

    public void outAModExp(AModExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExp(AModExp node)
    {
        inAModExp(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAModExp(node);
    }

    public void inAAndExp(AAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndExp(AAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExp(AAndExp node)
    {
        inAAndExp(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAAndExp(node);
    }

    public void inAOrExp(AOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrExp(AOrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExp(AOrExp node)
    {
        inAOrExp(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAOrExp(node);
    }

    public void inAXorExp(AXorExp node)
    {
        defaultIn(node);
    }

    public void outAXorExp(AXorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorExp(AXorExp node)
    {
        inAXorExp(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAXorExp(node);
    }

    public void inAEqExp(AEqExp node)
    {
        defaultIn(node);
    }

    public void outAEqExp(AEqExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqExp(AEqExp node)
    {
        inAEqExp(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAEqExp(node);
    }

    public void inANeqExp(ANeqExp node)
    {
        defaultIn(node);
    }

    public void outANeqExp(ANeqExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeqExp(ANeqExp node)
    {
        inANeqExp(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outANeqExp(node);
    }

    public void inALteqExp(ALteqExp node)
    {
        defaultIn(node);
    }

    public void outALteqExp(ALteqExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALteqExp(ALteqExp node)
    {
        inALteqExp(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outALteqExp(node);
    }

    public void inALtExp(ALtExp node)
    {
        defaultIn(node);
    }

    public void outALtExp(ALtExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtExp(ALtExp node)
    {
        inALtExp(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outALtExp(node);
    }

    public void inAGteqExp(AGteqExp node)
    {
        defaultIn(node);
    }

    public void outAGteqExp(AGteqExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGteqExp(AGteqExp node)
    {
        inAGteqExp(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAGteqExp(node);
    }

    public void inAGtExp(AGtExp node)
    {
        defaultIn(node);
    }

    public void outAGtExp(AGtExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtExp(AGtExp node)
    {
        inAGtExp(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outAGtExp(node);
    }

    public void inADotExp(ADotExp node)
    {
        defaultIn(node);
    }

    public void outADotExp(ADotExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADotExp(ADotExp node)
    {
        inADotExp(node);
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getL() != null)
        {
            node.getL().apply(this);
        }
        outADotExp(node);
    }

    public void inANumExp(ANumExp node)
    {
        defaultIn(node);
    }

    public void outANumExp(ANumExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumExp(ANumExp node)
    {
        inANumExp(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outANumExp(node);
    }

    public void inAFnumExp(AFnumExp node)
    {
        defaultIn(node);
    }

    public void outAFnumExp(AFnumExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFnumExp(AFnumExp node)
    {
        inAFnumExp(node);
        if(node.getFnum() != null)
        {
            node.getFnum().apply(this);
        }
        outAFnumExp(node);
    }

    public void inAStringExp(AStringExp node)
    {
        defaultIn(node);
    }

    public void outAStringExp(AStringExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringExp(AStringExp node)
    {
        inAStringExp(node);
        if(node.getStr() != null)
        {
            node.getStr().apply(this);
        }
        outAStringExp(node);
    }

    public void inATupleExp(ATupleExp node)
    {
        defaultIn(node);
    }

    public void outATupleExp(ATupleExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATupleExp(ATupleExp node)
    {
        inATupleExp(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getValues());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        outATupleExp(node);
    }

    public void inAIdentifierExp(AIdentifierExp node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExp(AIdentifierExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierExp(AIdentifierExp node)
    {
        inAIdentifierExp(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdentifierExp(node);
    }

    public void inAMethodcallExp(AMethodcallExp node)
    {
        defaultIn(node);
    }

    public void outAMethodcallExp(AMethodcallExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodcallExp(AMethodcallExp node)
    {
        inAMethodcallExp(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getArgs());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAMethodcallExp(node);
    }

    public void inAListExp(AListExp node)
    {
        defaultIn(node);
    }

    public void outAListExp(AListExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListExp(AListExp node)
    {
        inAListExp(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getList());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        outAListExp(node);
    }

    public void inAMethodcalldefExp(AMethodcalldefExp node)
    {
        defaultIn(node);
    }

    public void outAMethodcalldefExp(AMethodcalldefExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodcalldefExp(AMethodcalldefExp node)
    {
        inAMethodcalldefExp(node);
        if(node.getMethod() != null)
        {
            node.getMethod().apply(this);
        }
        if(node.getClazz() != null)
        {
            node.getClazz().apply(this);
        }
        outAMethodcalldefExp(node);
    }

    public void inANoneExp(ANoneExp node)
    {
        defaultIn(node);
    }

    public void outANoneExp(ANoneExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoneExp(ANoneExp node)
    {
        inANoneExp(node);
        outANoneExp(node);
    }
}
