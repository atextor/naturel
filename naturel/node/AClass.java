/* This file was generated by SableCC (http://www.sablecc.org/). */

package naturel.node;

import java.util.*;
import naturel.analysis.*;

@SuppressWarnings("nls")
public final class AClass extends PClass
{
    private PModifier _modifier_;
    private final LinkedList<TIdentifier> _name_ = new LinkedList<TIdentifier>();
    private final LinkedList<TIdentifier> _super_ = new LinkedList<TIdentifier>();
    private final LinkedList<PInterface> _interfaces_ = new LinkedList<PInterface>();
    private final LinkedList<PDeclaration> _vars_ = new LinkedList<PDeclaration>();
    private final LinkedList<PMethod> _methods_ = new LinkedList<PMethod>();

    public AClass()
    {
        // Constructor
    }

    public AClass(
        @SuppressWarnings("hiding") PModifier _modifier_,
        @SuppressWarnings("hiding") List<TIdentifier> _name_,
        @SuppressWarnings("hiding") List<TIdentifier> _super_,
        @SuppressWarnings("hiding") List<PInterface> _interfaces_,
        @SuppressWarnings("hiding") List<PDeclaration> _vars_,
        @SuppressWarnings("hiding") List<PMethod> _methods_)
    {
        // Constructor
        setModifier(_modifier_);

        setName(_name_);

        setSuper(_super_);

        setInterfaces(_interfaces_);

        setVars(_vars_);

        setMethods(_methods_);

    }

    @Override
    public Object clone()
    {
        return new AClass(
            cloneNode(this._modifier_),
            cloneList(this._name_),
            cloneList(this._super_),
            cloneList(this._interfaces_),
            cloneList(this._vars_),
            cloneList(this._methods_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClass(this);
    }

    public PModifier getModifier()
    {
        return this._modifier_;
    }

    public void setModifier(PModifier node)
    {
        if(this._modifier_ != null)
        {
            this._modifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._modifier_ = node;
    }

    public LinkedList<TIdentifier> getName()
    {
        return this._name_;
    }

    public void setName(List<TIdentifier> list)
    {
        this._name_.clear();
        this._name_.addAll(list);
        for(TIdentifier e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<TIdentifier> getSuper()
    {
        return this._super_;
    }

    public void setSuper(List<TIdentifier> list)
    {
        this._super_.clear();
        this._super_.addAll(list);
        for(TIdentifier e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PInterface> getInterfaces()
    {
        return this._interfaces_;
    }

    public void setInterfaces(List<PInterface> list)
    {
        this._interfaces_.clear();
        this._interfaces_.addAll(list);
        for(PInterface e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PDeclaration> getVars()
    {
        return this._vars_;
    }

    public void setVars(List<PDeclaration> list)
    {
        this._vars_.clear();
        this._vars_.addAll(list);
        for(PDeclaration e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PMethod> getMethods()
    {
        return this._methods_;
    }

    public void setMethods(List<PMethod> list)
    {
        this._methods_.clear();
        this._methods_.addAll(list);
        for(PMethod e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._modifier_)
            + toString(this._name_)
            + toString(this._super_)
            + toString(this._interfaces_)
            + toString(this._vars_)
            + toString(this._methods_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._modifier_ == child)
        {
            this._modifier_ = null;
            return;
        }

        if(this._name_.remove(child))
        {
            return;
        }

        if(this._super_.remove(child))
        {
            return;
        }

        if(this._interfaces_.remove(child))
        {
            return;
        }

        if(this._vars_.remove(child))
        {
            return;
        }

        if(this._methods_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._modifier_ == oldChild)
        {
            setModifier((PModifier) newChild);
            return;
        }

        for(ListIterator<TIdentifier> i = this._name_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TIdentifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<TIdentifier> i = this._super_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TIdentifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PInterface> i = this._interfaces_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PInterface) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PDeclaration> i = this._vars_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDeclaration) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PMethod> i = this._methods_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMethod) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
