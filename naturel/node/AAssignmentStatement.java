/* This file was generated by SableCC (http://www.sablecc.org/). */

package naturel.node;

import naturel.analysis.*;

@SuppressWarnings("nls")
public final class AAssignmentStatement extends PStatement
{
    private PExp _id_;
    private PExp _val_;

    public AAssignmentStatement()
    {
        // Constructor
    }

    public AAssignmentStatement(
        @SuppressWarnings("hiding") PExp _id_,
        @SuppressWarnings("hiding") PExp _val_)
    {
        // Constructor
        setId(_id_);

        setVal(_val_);

    }

    @Override
    public Object clone()
    {
        return new AAssignmentStatement(
            cloneNode(this._id_),
            cloneNode(this._val_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAssignmentStatement(this);
    }

    public PExp getId()
    {
        return this._id_;
    }

    public void setId(PExp node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public PExp getVal()
    {
        return this._val_;
    }

    public void setVal(PExp node)
    {
        if(this._val_ != null)
        {
            this._val_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._val_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._val_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._val_ == child)
        {
            this._val_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((PExp) newChild);
            return;
        }

        if(this._val_ == oldChild)
        {
            setVal((PExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
