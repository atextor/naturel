/* This file was generated by SableCC (http://www.sablecc.org/). */

package naturel.node;

import java.util.*;
import naturel.analysis.*;

@SuppressWarnings("nls")
public final class AMethod extends PMethod
{
    private PModifier _modifier_;
    private TIdentifier _name_;
    private PType _type_;
    private final LinkedList<PVariable> _params_ = new LinkedList<PVariable>();
    private PBlock _body_;

    public AMethod()
    {
        // Constructor
    }

    public AMethod(
        @SuppressWarnings("hiding") PModifier _modifier_,
        @SuppressWarnings("hiding") TIdentifier _name_,
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") List<PVariable> _params_,
        @SuppressWarnings("hiding") PBlock _body_)
    {
        // Constructor
        setModifier(_modifier_);

        setName(_name_);

        setType(_type_);

        setParams(_params_);

        setBody(_body_);

    }

    @Override
    public Object clone()
    {
        return new AMethod(
            cloneNode(this._modifier_),
            cloneNode(this._name_),
            cloneNode(this._type_),
            cloneList(this._params_),
            cloneNode(this._body_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethod(this);
    }

    public PModifier getModifier()
    {
        return this._modifier_;
    }

    public void setModifier(PModifier node)
    {
        if(this._modifier_ != null)
        {
            this._modifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._modifier_ = node;
    }

    public TIdentifier getName()
    {
        return this._name_;
    }

    public void setName(TIdentifier node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public LinkedList<PVariable> getParams()
    {
        return this._params_;
    }

    public void setParams(List<PVariable> list)
    {
        this._params_.clear();
        this._params_.addAll(list);
        for(PVariable e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PBlock getBody()
    {
        return this._body_;
    }

    public void setBody(PBlock node)
    {
        if(this._body_ != null)
        {
            this._body_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._body_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._modifier_)
            + toString(this._name_)
            + toString(this._type_)
            + toString(this._params_)
            + toString(this._body_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._modifier_ == child)
        {
            this._modifier_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._params_.remove(child))
        {
            return;
        }

        if(this._body_ == child)
        {
            this._body_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._modifier_ == oldChild)
        {
            setModifier((PModifier) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((TIdentifier) newChild);
            return;
        }

        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        for(ListIterator<PVariable> i = this._params_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVariable) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._body_ == oldChild)
        {
            setBody((PBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
