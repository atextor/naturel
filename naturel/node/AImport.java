/* This file was generated by SableCC (http://www.sablecc.org/). */

package naturel.node;

import java.util.*;
import naturel.analysis.*;

@SuppressWarnings("nls")
public final class AImport extends PImport
{
    private final LinkedList<TIdentifier> _name_ = new LinkedList<TIdentifier>();
    private POptionalIdentifier _as_;

    public AImport()
    {
        // Constructor
    }

    public AImport(
        @SuppressWarnings("hiding") List<TIdentifier> _name_,
        @SuppressWarnings("hiding") POptionalIdentifier _as_)
    {
        // Constructor
        setName(_name_);

        setAs(_as_);

    }

    @Override
    public Object clone()
    {
        return new AImport(
            cloneList(this._name_),
            cloneNode(this._as_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAImport(this);
    }

    public LinkedList<TIdentifier> getName()
    {
        return this._name_;
    }

    public void setName(List<TIdentifier> list)
    {
        this._name_.clear();
        this._name_.addAll(list);
        for(TIdentifier e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public POptionalIdentifier getAs()
    {
        return this._as_;
    }

    public void setAs(POptionalIdentifier node)
    {
        if(this._as_ != null)
        {
            this._as_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._as_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._as_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_.remove(child))
        {
            return;
        }

        if(this._as_ == child)
        {
            this._as_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TIdentifier> i = this._name_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TIdentifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._as_ == oldChild)
        {
            setAs((POptionalIdentifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
