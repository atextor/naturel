/* This file was generated by SableCC (http://www.sablecc.org/). */

package naturel.parser;

import naturel.lexer.*;
import naturel.node.*;
import naturel.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAnaturel1Naturel */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAnaturel2Naturel */
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce ASingleUsesList */
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;
                    case 3: /* reduce AMultipleUsesList */
		    {
			ArrayList list = new3();
			push(goTo(1), list);
		    }
		    break;
                    case 4: /* reduce AOneUseAs */
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;
                    case 5: /* reduce ANoneUseAs */
		    {
			ArrayList list = new5();
			push(goTo(2), list);
		    }
		    break;
                    case 6: /* reduce AUses */
		    {
			ArrayList list = new6();
			push(goTo(3), list);
		    }
		    break;
                    case 7: /* reduce ASingleClassesList */
		    {
			ArrayList list = new7();
			push(goTo(4), list);
		    }
		    break;
                    case 8: /* reduce AMultipleClassesList */
		    {
			ArrayList list = new8();
			push(goTo(4), list);
		    }
		    break;
                    case 9: /* reduce AAclasses1Classes */
		    {
			ArrayList list = new9();
			push(goTo(5), list);
		    }
		    break;
                    case 10: /* reduce AAclasses2Classes */
		    {
			ArrayList list = new10();
			push(goTo(5), list);
		    }
		    break;
                    case 11: /* reduce AAclasses3Classes */
		    {
			ArrayList list = new11();
			push(goTo(5), list);
		    }
		    break;
                    case 12: /* reduce AAclasses4Classes */
		    {
			ArrayList list = new12();
			push(goTo(5), list);
		    }
		    break;
                    case 13: /* reduce APublModifier */
		    {
			ArrayList list = new13();
			push(goTo(6), list);
		    }
		    break;
                    case 14: /* reduce APrivModifier */
		    {
			ArrayList list = new14();
			push(goTo(6), list);
		    }
		    break;
                    case 15: /* reduce AProtModifier */
		    {
			ArrayList list = new15();
			push(goTo(6), list);
		    }
		    break;
                    case 16: /* reduce APublStatModifier */
		    {
			ArrayList list = new16();
			push(goTo(6), list);
		    }
		    break;
                    case 17: /* reduce APrivStatModifier */
		    {
			ArrayList list = new17();
			push(goTo(6), list);
		    }
		    break;
                    case 18: /* reduce AProtStatModifier */
		    {
			ArrayList list = new18();
			push(goTo(6), list);
		    }
		    break;
                    case 19: /* reduce AAidentifierclass1Identifierclass */
		    {
			ArrayList list = new19();
			push(goTo(7), list);
		    }
		    break;
                    case 20: /* reduce AAidentifierclass2Identifierclass */
		    {
			ArrayList list = new20();
			push(goTo(7), list);
		    }
		    break;
                    case 21: /* reduce AIdentifierclassNext */
		    {
			ArrayList list = new21();
			push(goTo(8), list);
		    }
		    break;
                    case 22: /* reduce AAoneinterfaces1Interfaces */
		    {
			ArrayList list = new22();
			push(goTo(9), list);
		    }
		    break;
                    case 23: /* reduce AAoneinterfaces2Interfaces */
		    {
			ArrayList list = new23();
			push(goTo(9), list);
		    }
		    break;
                    case 24: /* reduce ANoneInterfaces */
		    {
			ArrayList list = new24();
			push(goTo(9), list);
		    }
		    break;
                    case 25: /* reduce AAoneinterfacesnext1InterfacesNext */
		    {
			ArrayList list = new25();
			push(goTo(10), list);
		    }
		    break;
                    case 26: /* reduce AAoneinterfacesnext2InterfacesNext */
		    {
			ArrayList list = new26();
			push(goTo(10), list);
		    }
		    break;
                    case 27: /* reduce AInterface */
		    {
			ArrayList list = new27();
			push(goTo(11), list);
		    }
		    break;
                    case 28: /* reduce AOneInherits */
		    {
			ArrayList list = new28();
			push(goTo(12), list);
		    }
		    break;
                    case 29: /* reduce ANoneInherits */
		    {
			ArrayList list = new29();
			push(goTo(12), list);
		    }
		    break;
                    case 30: /* reduce AOneVariableAssign */
		    {
			ArrayList list = new30();
			push(goTo(13), list);
		    }
		    break;
                    case 31: /* reduce ANoneVariableAssign */
		    {
			ArrayList list = new31();
			push(goTo(13), list);
		    }
		    break;
                    case 32: /* reduce ATrueArray */
		    {
			ArrayList list = new32();
			push(goTo(14), list);
		    }
		    break;
                    case 33: /* reduce AFalseArray */
		    {
			ArrayList list = new33();
			push(goTo(14), list);
		    }
		    break;
                    case 34: /* reduce ATuple */
		    {
			ArrayList list = new34();
			push(goTo(15), list);
		    }
		    break;
                    case 35: /* reduce AIdentType */
		    {
			ArrayList list = new35();
			push(goTo(16), list);
		    }
		    break;
                    case 36: /* reduce ATupType */
		    {
			ArrayList list = new36();
			push(goTo(16), list);
		    }
		    break;
                    case 37: /* reduce ANamedMethodParam */
		    {
			ArrayList list = new37();
			push(goTo(17), list);
		    }
		    break;
                    case 38: /* reduce AUnnamedMethodParam */
		    {
			ArrayList list = new38();
			push(goTo(17), list);
		    }
		    break;
                    case 39: /* reduce AVarVarDecl */
		    {
			ArrayList list = new39();
			push(goTo(18), list);
		    }
		    break;
                    case 40: /* reduce AVariable */
		    {
			ArrayList list = new40();
			push(goTo(19), list);
		    }
		    break;
                    case 41: /* reduce AAonemethodparams1MethodParams */
		    {
			ArrayList list = new41();
			push(goTo(20), list);
		    }
		    break;
                    case 42: /* reduce AAonemethodparams2MethodParams */
		    {
			ArrayList list = new42();
			push(goTo(20), list);
		    }
		    break;
                    case 43: /* reduce ANoneMethodParams */
		    {
			ArrayList list = new43();
			push(goTo(20), list);
		    }
		    break;
                    case 44: /* reduce AAmethodparamsnext1MethodParamsNext */
		    {
			ArrayList list = new44();
			push(goTo(21), list);
		    }
		    break;
                    case 45: /* reduce AAmethodparamsnext2MethodParamsNext */
		    {
			ArrayList list = new45();
			push(goTo(21), list);
		    }
		    break;
                    case 46: /* reduce AOneMethodType */
		    {
			ArrayList list = new46();
			push(goTo(22), list);
		    }
		    break;
                    case 47: /* reduce ANoneMethodType */
		    {
			ArrayList list = new47();
			push(goTo(22), list);
		    }
		    break;
                    case 48: /* reduce AAblock1Block */
		    {
			ArrayList list = new48();
			push(goTo(23), list);
		    }
		    break;
                    case 49: /* reduce AAblock2Block */
		    {
			ArrayList list = new49();
			push(goTo(23), list);
		    }
		    break;
                    case 50: /* reduce AMethod */
		    {
			ArrayList list = new50();
			push(goTo(24), list);
		    }
		    break;
                    case 51: /* reduce AVarStatements */
		    {
			ArrayList list = new51();
			push(goTo(25), list);
		    }
		    break;
                    case 52: /* reduce AIfStatements */
		    {
			ArrayList list = new52();
			push(goTo(25), list);
		    }
		    break;
                    case 53: /* reduce AWhileStatements */
		    {
			ArrayList list = new53();
			push(goTo(25), list);
		    }
		    break;
                    case 54: /* reduce AAssignmentStatements */
		    {
			ArrayList list = new54();
			push(goTo(25), list);
		    }
		    break;
                    case 55: /* reduce AStatStatements */
		    {
			ArrayList list = new55();
			push(goTo(25), list);
		    }
		    break;
                    case 56: /* reduce AAssignment */
		    {
			ArrayList list = new56();
			push(goTo(26), list);
		    }
		    break;
                    case 57: /* reduce AIfStatement */
		    {
			ArrayList list = new57();
			push(goTo(27), list);
		    }
		    break;
                    case 58: /* reduce AWhileStatement */
		    {
			ArrayList list = new58();
			push(goTo(28), list);
		    }
		    break;
                    case 59: /* reduce AAndExpression */
		    {
			ArrayList list = new59();
			push(goTo(29), list);
		    }
		    break;
                    case 60: /* reduce AOrExpression */
		    {
			ArrayList list = new60();
			push(goTo(29), list);
		    }
		    break;
                    case 61: /* reduce AXorExpression */
		    {
			ArrayList list = new61();
			push(goTo(29), list);
		    }
		    break;
                    case 62: /* reduce AExpr2Expression */
		    {
			ArrayList list = new62();
			push(goTo(29), list);
		    }
		    break;
                    case 63: /* reduce AEqExpr2 */
		    {
			ArrayList list = new63();
			push(goTo(30), list);
		    }
		    break;
                    case 64: /* reduce ANeqExpr2 */
		    {
			ArrayList list = new64();
			push(goTo(30), list);
		    }
		    break;
                    case 65: /* reduce ALteqExpr2 */
		    {
			ArrayList list = new65();
			push(goTo(30), list);
		    }
		    break;
                    case 66: /* reduce ALtExpr2 */
		    {
			ArrayList list = new66();
			push(goTo(30), list);
		    }
		    break;
                    case 67: /* reduce AGteqExpr2 */
		    {
			ArrayList list = new67();
			push(goTo(30), list);
		    }
		    break;
                    case 68: /* reduce AGtExpr2 */
		    {
			ArrayList list = new68();
			push(goTo(30), list);
		    }
		    break;
                    case 69: /* reduce AExpr3Expr2 */
		    {
			ArrayList list = new69();
			push(goTo(30), list);
		    }
		    break;
                    case 70: /* reduce AMinusExpr3 */
		    {
			ArrayList list = new70();
			push(goTo(31), list);
		    }
		    break;
                    case 71: /* reduce APlusExpr3 */
		    {
			ArrayList list = new71();
			push(goTo(31), list);
		    }
		    break;
                    case 72: /* reduce AExpr4Expr3 */
		    {
			ArrayList list = new72();
			push(goTo(31), list);
		    }
		    break;
                    case 73: /* reduce AMultExpr4 */
		    {
			ArrayList list = new73();
			push(goTo(32), list);
		    }
		    break;
                    case 74: /* reduce ADivExpr4 */
		    {
			ArrayList list = new74();
			push(goTo(32), list);
		    }
		    break;
                    case 75: /* reduce AModExpr4 */
		    {
			ArrayList list = new75();
			push(goTo(32), list);
		    }
		    break;
                    case 76: /* reduce AExpr5Expr4 */
		    {
			ArrayList list = new76();
			push(goTo(32), list);
		    }
		    break;
                    case 77: /* reduce ADotExpr5 */
		    {
			ArrayList list = new77();
			push(goTo(33), list);
		    }
		    break;
                    case 78: /* reduce AFaktorExpr5 */
		    {
			ArrayList list = new78();
			push(goTo(33), list);
		    }
		    break;
                    case 79: /* reduce AAonepar1Par */
		    {
			ArrayList list = new79();
			push(goTo(34), list);
		    }
		    break;
                    case 80: /* reduce AAonepar2Par */
		    {
			ArrayList list = new80();
			push(goTo(34), list);
		    }
		    break;
                    case 81: /* reduce AEmptyPar */
		    {
			ArrayList list = new81();
			push(goTo(34), list);
		    }
		    break;
                    case 82: /* reduce ANonePar */
		    {
			ArrayList list = new82();
			push(goTo(34), list);
		    }
		    break;
                    case 83: /* reduce AExpressionNext */
		    {
			ArrayList list = new83();
			push(goTo(35), list);
		    }
		    break;
                    case 84: /* reduce AIdFaktor */
		    {
			ArrayList list = new84();
			push(goTo(36), list);
		    }
		    break;
                    case 85: /* reduce AStrFaktor */
		    {
			ArrayList list = new85();
			push(goTo(36), list);
		    }
		    break;
                    case 86: /* reduce ANumFaktor */
		    {
			ArrayList list = new86();
			push(goTo(36), list);
		    }
		    break;
                    case 87: /* reduce AFnumFaktor */
		    {
			ArrayList list = new87();
			push(goTo(36), list);
		    }
		    break;
                    case 88: /* reduce AAexprfaktor1Faktor */
		    {
			ArrayList list = new88();
			push(goTo(36), list);
		    }
		    break;
                    case 89: /* reduce AAexprfaktor2Faktor */
		    {
			ArrayList list = new89();
			push(goTo(36), list);
		    }
		    break;
                    case 90: /* reduce ATerminal$Variable */
		    {
			ArrayList list = new90();
			push(goTo(37), list);
		    }
		    break;
                    case 91: /* reduce ANonTerminal$Variable */
		    {
			ArrayList list = new91();
			push(goTo(37), list);
		    }
		    break;
                    case 92: /* reduce ATerminal$Method */
		    {
			ArrayList list = new92();
			push(goTo(38), list);
		    }
		    break;
                    case 93: /* reduce ANonTerminal$Method */
		    {
			ArrayList list = new93();
			push(goTo(38), list);
		    }
		    break;
                    case 94: /* reduce ATerminal$IdentifierclassNext */
		    {
			ArrayList list = new94();
			push(goTo(39), list);
		    }
		    break;
                    case 95: /* reduce ANonTerminal$IdentifierclassNext */
		    {
			ArrayList list = new95();
			push(goTo(39), list);
		    }
		    break;
                    case 96: /* reduce ATerminal$Statements */
		    {
			ArrayList list = new96();
			push(goTo(40), list);
		    }
		    break;
                    case 97: /* reduce ANonTerminal$Statements */
		    {
			ArrayList list = new97();
			push(goTo(40), list);
		    }
		    break;
                    case 98: /* reduce ATerminal$ExpressionNext */
		    {
			ArrayList list = new98();
			push(goTo(41), list);
		    }
		    break;
                    case 99: /* reduce ANonTerminal$ExpressionNext */
		    {
			ArrayList list = new99();
			push(goTo(41), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PNaturel node1 = (PNaturel) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAnaturel1Naturel */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNaturel pnaturelNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        }
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pnaturelNode1 = new ANaturel(listNode2, listNode4);
        }
	nodeList.add(pnaturelNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAnaturel2Naturel */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNaturel pnaturelNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pnaturelNode1 = new ANaturel(listNode3, listNode5);
        }
	nodeList.add(pnaturelNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce ASingleUsesList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PImport pimportNode1;
        pimportNode1 = (PImport)nodeArrayList1.get(0);
	if(pimportNode1 != null)
	{
	  listNode2.add(pimportNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AMultipleUsesList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PImport pimportNode1;
        LinkedList listNode2 = new LinkedList();
        pimportNode1 = (PImport)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pimportNode1 != null)
	{
	  listNode3.add(pimportNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AOneUseAs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POptionalIdentifier poptionalidentifierNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);

        poptionalidentifierNode1 = new AOneOptionalIdentifier(tidentifierNode2);
        }
	nodeList.add(poptionalidentifierNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce ANoneUseAs */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        POptionalIdentifier poptionalidentifierNode1;
        {
            // Block

        poptionalidentifierNode1 = new ANoneOptionalIdentifier();
        }
	nodeList.add(poptionalidentifierNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AUses */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PImport pimportNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        POptionalIdentifier poptionalidentifierNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        poptionalidentifierNode4 = (POptionalIdentifier)nodeArrayList3.get(0);

        pimportNode1 = new AImport(listNode3, poptionalidentifierNode4);
        }
	nodeList.add(pimportNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce ASingleClassesList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PClass pclassNode1;
        pclassNode1 = (PClass)nodeArrayList1.get(0);
	if(pclassNode1 != null)
	{
	  listNode2.add(pclassNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AMultipleClassesList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PClass pclassNode1;
        LinkedList listNode2 = new LinkedList();
        pclassNode1 = (PClass)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pclassNode1 != null)
	{
	  listNode3.add(pclassNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAclasses1Classes */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClass pclassNode1;
        {
            // Block
        PModifier pmodifierNode2;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        LinkedList listNode8 = new LinkedList();
        LinkedList listNode9 = new LinkedList();
        LinkedList listNode10 = new LinkedList();
        pmodifierNode2 = (PModifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList4.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        }
        {
            // Block
        }

        pclassNode1 = new AClass(pmodifierNode2, listNode4, listNode6, listNode8, listNode9, listNode10);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAclasses2Classes */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClass pclassNode1;
        {
            // Block
        PModifier pmodifierNode2;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        LinkedList listNode8 = new LinkedList();
        LinkedList listNode10 = new LinkedList();
        LinkedList listNode11 = new LinkedList();
        pmodifierNode2 = (PModifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList4.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        listNode9 = (LinkedList)nodeArrayList6.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        {
            // Block
        }

        pclassNode1 = new AClass(pmodifierNode2, listNode4, listNode6, listNode8, listNode10, listNode11);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAclasses3Classes */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClass pclassNode1;
        {
            // Block
        PModifier pmodifierNode2;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        LinkedList listNode8 = new LinkedList();
        LinkedList listNode9 = new LinkedList();
        LinkedList listNode11 = new LinkedList();
        pmodifierNode2 = (PModifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList4.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList listNode10 = new LinkedList();
        listNode10 = (LinkedList)nodeArrayList6.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }

        pclassNode1 = new AClass(pmodifierNode2, listNode4, listNode6, listNode8, listNode9, listNode11);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAclasses4Classes */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PClass pclassNode1;
        {
            // Block
        PModifier pmodifierNode2;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        LinkedList listNode8 = new LinkedList();
        LinkedList listNode10 = new LinkedList();
        LinkedList listNode12 = new LinkedList();
        pmodifierNode2 = (PModifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList listNode7 = new LinkedList();
        listNode7 = (LinkedList)nodeArrayList4.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        listNode9 = (LinkedList)nodeArrayList6.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        {
            // Block
        LinkedList listNode11 = new LinkedList();
        listNode11 = (LinkedList)nodeArrayList7.get(0);
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }

        pclassNode1 = new AClass(pmodifierNode2, listNode4, listNode6, listNode8, listNode10, listNode12);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce APublModifier */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModifier pmodifierNode1;
        {
            // Block

        pmodifierNode1 = new APublModifier();
        }
	nodeList.add(pmodifierNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce APrivModifier */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModifier pmodifierNode1;
        {
            // Block

        pmodifierNode1 = new APrivModifier();
        }
	nodeList.add(pmodifierNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AProtModifier */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModifier pmodifierNode1;
        {
            // Block

        pmodifierNode1 = new AProtModifier();
        }
	nodeList.add(pmodifierNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce APublStatModifier */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModifier pmodifierNode1;
        {
            // Block

        pmodifierNode1 = new APublStatModifier();
        }
	nodeList.add(pmodifierNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce APrivStatModifier */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModifier pmodifierNode1;
        {
            // Block

        pmodifierNode1 = new APrivStatModifier();
        }
	nodeList.add(pmodifierNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AProtStatModifier */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PModifier pmodifierNode1;
        {
            // Block

        pmodifierNode1 = new AProtStatModifier();
        }
	nodeList.add(pmodifierNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AAidentifierclass1Identifierclass */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode1;
        tidentifierNode1 = (TIdentifier)nodeArrayList1.get(0);
	if(tidentifierNode1 != null)
	{
	  listNode2.add(tidentifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AAidentifierclass2Identifierclass */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode1;
        LinkedList listNode2 = new LinkedList();
        tidentifierNode1 = (TIdentifier)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(tidentifierNode1 != null)
	{
	  listNode3.add(tidentifierNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AIdentifierclassNext */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        TIdentifier tidentifierNode1;
        tidentifierNode1 = (TIdentifier)nodeArrayList2.get(0);
	nodeList.add(tidentifierNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AAoneinterfaces1Interfaces */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PInterface pinterfaceNode1;
        pinterfaceNode1 = (PInterface)nodeArrayList2.get(0);
	if(pinterfaceNode1 != null)
	{
	  listNode2.add(pinterfaceNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AAoneinterfaces2Interfaces */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PInterface pinterfaceNode1;
        LinkedList listNode2 = new LinkedList();
        pinterfaceNode1 = (PInterface)nodeArrayList2.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pinterfaceNode1 != null)
	{
	  listNode3.add(pinterfaceNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce ANoneInterfaces */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AAoneinterfacesnext1InterfacesNext */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PInterface pinterfaceNode1;
        pinterfaceNode1 = (PInterface)nodeArrayList2.get(0);
	if(pinterfaceNode1 != null)
	{
	  listNode2.add(pinterfaceNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AAoneinterfacesnext2InterfacesNext */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PInterface pinterfaceNode1;
        LinkedList listNode2 = new LinkedList();
        pinterfaceNode1 = (PInterface)nodeArrayList2.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pinterfaceNode1 != null)
	{
	  listNode3.add(pinterfaceNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AInterface */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PInterface pinterfaceNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pinterfaceNode1 = new AInterfaceInterface(listNode3);
        }
	nodeList.add(pinterfaceNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AOneInherits */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        listNode1 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce ANoneInherits */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AOneVariableAssign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce ANoneVariableAssign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new ANoneExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ATrueArray */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFlag pflagNode1;
        {
            // Block

        pflagNode1 = new ATrueFlag();
        }
	nodeList.add(pflagNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AFalseArray */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PFlag pflagNode1;
        {
            // Block

        pflagNode1 = new AFalseFlag();
        }
	nodeList.add(pflagNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ATuple */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        listNode1 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AIdentType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PFlag pflagNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pflagNode3 = (PFlag)nodeArrayList2.get(0);

        ptypeNode1 = new ATypeType(tidentifierNode2, pflagNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce ATupType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PFlag pflagNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pflagNode4 = (PFlag)nodeArrayList2.get(0);

        ptypeNode1 = new ATupleType(listNode3, pflagNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce ANamedMethodParam */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PType ptypeNode3;
        PExp pexpNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList3.get(0);
        pexpNode4 = (PExp)nodeArrayList4.get(0);

        pvariableNode1 = new ANamedVariable(tidentifierNode2, ptypeNode3, pexpNode4);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AUnnamedMethodParam */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        PType ptypeNode2;
        PExp pexpNode3;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pvariableNode1 = new AUnnamedVariable(ptypeNode2, pexpNode3);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AVarVarDecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PType ptypeNode3;
        PExp pexpNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList3.get(0);
        pexpNode4 = (PExp)nodeArrayList4.get(0);

        pvariableNode1 = new ANamedVariable(tidentifierNode2, ptypeNode3, pexpNode4);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AVariable */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        PModifier pmodifierNode2;
        PVariable pvariableNode3;
        pmodifierNode2 = (PModifier)nodeArrayList1.get(0);
        pvariableNode3 = (PVariable)nodeArrayList2.get(0);

        pdeclarationNode1 = new ADeclaration(pmodifierNode2, pvariableNode3);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AAonemethodparams1MethodParams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PVariable pvariableNode1;
        pvariableNode1 = (PVariable)nodeArrayList1.get(0);
	if(pvariableNode1 != null)
	{
	  listNode2.add(pvariableNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AAonemethodparams2MethodParams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PVariable pvariableNode1;
        LinkedList listNode2 = new LinkedList();
        pvariableNode1 = (PVariable)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pvariableNode1 != null)
	{
	  listNode3.add(pvariableNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce ANoneMethodParams */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AAmethodparamsnext1MethodParamsNext */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PVariable pvariableNode1;
        pvariableNode1 = (PVariable)nodeArrayList2.get(0);
	if(pvariableNode1 != null)
	{
	  listNode2.add(pvariableNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AAmethodparamsnext2MethodParamsNext */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PVariable pvariableNode1;
        LinkedList listNode2 = new LinkedList();
        pvariableNode1 = (PVariable)nodeArrayList2.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pvariableNode1 != null)
	{
	  listNode3.add(pvariableNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AOneMethodType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        ptypeNode1 = (PType)nodeArrayList2.get(0);
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce ANoneMethodType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        PType ptypeNode1;
        {
            // Block

        ptypeNode1 = new ADefaultType();
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AAblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        }

        pblockNode1 = new ABlock(listNode2);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AAblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pblockNode1 = new ABlock(listNode3);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce AMethod */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMethod pmethodNode1;
        {
            // Block
        PModifier pmodifierNode2;
        TIdentifier tidentifierNode3;
        PType ptypeNode4;
        LinkedList listNode6 = new LinkedList();
        PBlock pblockNode7;
        pmodifierNode2 = (PModifier)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        ptypeNode4 = (PType)nodeArrayList6.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pblockNode7 = (PBlock)nodeArrayList7.get(0);

        pmethodNode1 = new AMethod(pmodifierNode2, tidentifierNode3, ptypeNode4, listNode6, pblockNode7);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AVarStatements */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PVariable pvariableNode2;
        pvariableNode2 = (PVariable)nodeArrayList1.get(0);

        pstatementNode1 = new ADeclarationStatement(pvariableNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AIfStatements */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AWhileStatements */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AAssignmentStatements */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AStatStatements */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pstatementNode1 = new AExpStatement(pexpNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce AAssignment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignmentStatement(pexpNode2, pexpNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExp pexpNode2;
        PBlock pblockNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pblockNode3 = (PBlock)nodeArrayList5.get(0);

        pstatementNode1 = new AIfStatement(pexpNode2, pblockNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExp pexpNode2;
        PBlock pblockNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pblockNode3 = (PBlock)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(pexpNode2, pblockNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce AAndExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAndExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AOrExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOrExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce AXorExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AXorExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce AExpr2Expression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce AEqExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AEqExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce ANeqExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ANeqExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce ALteqExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALteqExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce ALtExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALtExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce AGteqExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGteqExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce AGtExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGtExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce AExpr3Expr2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce AMinusExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMinusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce APlusExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new APlusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce AExpr4Expr3 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce AMultExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce ADivExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce AModExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AModExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce AExpr5Expr4 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce ADotExpr5 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADotExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce AFaktorExpr5 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce AAonepar1Par */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce AAonepar2Par */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        LinkedList listNode2 = new LinkedList();
        pexpNode1 = (PExp)nodeArrayList2.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pexpNode1 != null)
	{
	  listNode3.add(pexpNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce AEmptyPar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new ANoneExp();
        }
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce ANonePar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce AExpressionNext */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce AIdFaktor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode4 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpNode1 = new AMethodcallExp(tidentifierNode2, listNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce AStrFaktor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pexpNode1 = new AStringExp(tstringNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new86() /* reduce ANumFaktor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TDigitSequence tdigitsequenceNode2;
        tdigitsequenceNode2 = (TDigitSequence)nodeArrayList1.get(0);

        pexpNode1 = new ANumExp(tdigitsequenceNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new87() /* reduce AFnumFaktor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TFloatSequence tfloatsequenceNode2;
        tfloatsequenceNode2 = (TFloatSequence)nodeArrayList1.get(0);

        pexpNode1 = new AFnumExp(tfloatsequenceNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new88() /* reduce AAexprfaktor1Faktor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }

        pexpNode1 = new ATupleExp(listNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new89() /* reduce AAexprfaktor2Faktor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        PExp pexpNode2;
        LinkedList listNode3 = new LinkedList();
        pexpNode2 = (PExp)nodeArrayList2.get(0);
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(pexpNode2 != null)
	{
	  listNode4.add(pexpNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpNode1 = new ATupleExp(listNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new90() /* reduce ATerminal$Variable */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PDeclaration pdeclarationNode1;
        pdeclarationNode1 = (PDeclaration)nodeArrayList1.get(0);
	if(pdeclarationNode1 != null)
	{
	  listNode2.add(pdeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new91() /* reduce ANonTerminal$Variable */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PDeclaration pdeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclarationNode2 = (PDeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclarationNode2 != null)
	{
	  listNode3.add(pdeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new92() /* reduce ATerminal$Method */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PMethod pmethodNode1;
        pmethodNode1 = (PMethod)nodeArrayList1.get(0);
	if(pmethodNode1 != null)
	{
	  listNode2.add(pmethodNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new93() /* reduce ANonTerminal$Method */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PMethod pmethodNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethodNode2 = (PMethod)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethodNode2 != null)
	{
	  listNode3.add(pmethodNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new94() /* reduce ATerminal$IdentifierclassNext */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        TIdentifier tidentifierNode1;
        tidentifierNode1 = (TIdentifier)nodeArrayList1.get(0);
	if(tidentifierNode1 != null)
	{
	  listNode2.add(tidentifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new95() /* reduce ANonTerminal$IdentifierclassNext */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        TIdentifier tidentifierNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tidentifierNode2 != null)
	{
	  listNode3.add(tidentifierNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new96() /* reduce ATerminal$Statements */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new97() /* reduce ANonTerminal$Statements */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new98() /* reduce ATerminal$ExpressionNext */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new99() /* reduce ANonTerminal$ExpressionNext */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExp pexpNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {6, SHIFT, 1}, {7, SHIFT, 2}, {8, SHIFT, 3}, {16, SHIFT, 4}, {17, SHIFT, 5}, {20, SHIFT, 6}, {44, SHIFT, 7}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 7}, {46, SHIFT, 14}, },
			{{-1, ERROR, 8}, {49, ACCEPT, -1}, },
			{{-1, ERROR, 9}, {6, SHIFT, 1}, {7, SHIFT, 2}, {8, SHIFT, 3}, {16, SHIFT, 4}, {17, SHIFT, 5}, {20, SHIFT, 6}, },
			{{-1, REDUCE, 2}, {44, SHIFT, 7}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 7}, {6, SHIFT, 1}, {7, SHIFT, 2}, {8, SHIFT, 3}, {16, SHIFT, 4}, {17, SHIFT, 5}, {20, SHIFT, 6}, },
			{{-1, ERROR, 13}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 19}, {30, SHIFT, 20}, },
			{{-1, REDUCE, 5}, {39, SHIFT, 23}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 29}, {35, SHIFT, 25}, },
			{{-1, ERROR, 20}, {46, SHIFT, 27}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 20}, {30, SHIFT, 20}, },
			{{-1, ERROR, 23}, {46, SHIFT, 29}, },
			{{-1, ERROR, 24}, {21, SHIFT, 30}, },
			{{-1, ERROR, 25}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 24}, {24, SHIFT, 32}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 32}, {46, SHIFT, 14}, },
			{{-1, ERROR, 33}, {4, SHIFT, 36}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 22}, {22, SHIFT, 37}, },
			{{-1, ERROR, 36}, {5, SHIFT, 39}, {6, SHIFT, 1}, {7, SHIFT, 2}, {8, SHIFT, 3}, {16, SHIFT, 4}, {17, SHIFT, 5}, {20, SHIFT, 6}, },
			{{-1, ERROR, 37}, {46, SHIFT, 14}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 40}, {46, SHIFT, 46}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 43}, {5, SHIFT, 48}, {6, SHIFT, 1}, {7, SHIFT, 2}, {8, SHIFT, 3}, {16, SHIFT, 4}, {17, SHIFT, 5}, {20, SHIFT, 6}, },
			{{-1, ERROR, 44}, {5, SHIFT, 51}, {6, SHIFT, 1}, {7, SHIFT, 2}, {8, SHIFT, 3}, {16, SHIFT, 4}, {17, SHIFT, 5}, {20, SHIFT, 6}, },
			{{-1, REDUCE, 25}, {22, SHIFT, 37}, },
			{{-1, ERROR, 46}, {0, SHIFT, 55}, {24, SHIFT, 56}, },
			{{-1, ERROR, 47}, {21, SHIFT, 57}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 50}, {5, SHIFT, 58}, {6, SHIFT, 1}, {7, SHIFT, 2}, {8, SHIFT, 3}, {16, SHIFT, 4}, {17, SHIFT, 5}, {20, SHIFT, 6}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 52}, {46, SHIFT, 59}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 43}, {24, SHIFT, 60}, {46, SHIFT, 61}, },
			{{-1, ERROR, 56}, {0, SHIFT, 64}, {46, SHIFT, 65}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 59}, {0, SHIFT, 55}, },
			{{-1, ERROR, 60}, {0, SHIFT, 64}, {46, SHIFT, 65}, },
			{{-1, ERROR, 61}, {24, SHIFT, 69}, },
			{{-1, REDUCE, 41}, {22, SHIFT, 70}, },
			{{-1, ERROR, 63}, {1, SHIFT, 72}, },
			{{-1, REDUCE, 43}, {24, SHIFT, 60}, {46, SHIFT, 61}, },
			{{-1, REDUCE, 33}, {2, SHIFT, 74}, },
			{{-1, REDUCE, 33}, {2, SHIFT, 74}, },
			{{-1, REDUCE, 31}, {23, SHIFT, 77}, },
			{{-1, REDUCE, 31}, {23, SHIFT, 77}, },
			{{-1, ERROR, 69}, {0, SHIFT, 64}, {46, SHIFT, 65}, },
			{{-1, ERROR, 70}, {24, SHIFT, 60}, {46, SHIFT, 61}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 47}, {24, SHIFT, 82}, },
			{{-1, ERROR, 73}, {1, SHIFT, 84}, },
			{{-1, ERROR, 74}, {3, SHIFT, 85}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 77}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 31}, {23, SHIFT, 77}, },
			{{-1, REDUCE, 44}, {22, SHIFT, 70}, },
			{{-1, ERROR, 82}, {0, SHIFT, 64}, {46, SHIFT, 65}, },
			{{-1, ERROR, 83}, {4, SHIFT, 100}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 86}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 82}, {0, SHIFT, 103}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 62}, {26, SHIFT, 105}, {28, SHIFT, 106}, {29, SHIFT, 107}, },
			{{-1, REDUCE, 69}, {32, SHIFT, 108}, {33, SHIFT, 109}, {34, SHIFT, 110}, {35, SHIFT, 111}, {36, SHIFT, 112}, {37, SHIFT, 113}, },
			{{-1, REDUCE, 72}, {16, SHIFT, 114}, {17, SHIFT, 115}, },
			{{-1, REDUCE, 76}, {18, SHIFT, 116}, {19, SHIFT, 117}, {25, SHIFT, 118}, },
			{{-1, REDUCE, 78}, {30, SHIFT, 119}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 100}, {0, SHIFT, 86}, {5, SHIFT, 120}, {24, SHIFT, 60}, {40, SHIFT, 121}, {42, SHIFT, 122}, {45, SHIFT, 87}, {46, SHIFT, 123}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 102}, {1, SHIFT, 132}, {22, SHIFT, 133}, },
			{{-1, ERROR, 103}, {0, SHIFT, 86}, {1, SHIFT, 136}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 105}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, ERROR, 106}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, ERROR, 107}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, ERROR, 108}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, ERROR, 109}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, ERROR, 110}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, ERROR, 111}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, ERROR, 112}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, ERROR, 113}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, ERROR, 114}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, ERROR, 115}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, ERROR, 116}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, ERROR, 117}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, ERROR, 118}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, ERROR, 119}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 121}, {0, SHIFT, 153}, },
			{{-1, ERROR, 122}, {0, SHIFT, 154}, },
			{{-1, REDUCE, 82}, {0, SHIFT, 103}, {24, SHIFT, 69}, },
			{{-1, ERROR, 124}, {21, SHIFT, 155}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 129}, {21, SHIFT, 156}, },
			{{-1, REDUCE, 76}, {18, SHIFT, 116}, {19, SHIFT, 117}, {23, SHIFT, 157}, {25, SHIFT, 118}, },
			{{-1, ERROR, 131}, {0, SHIFT, 86}, {5, SHIFT, 158}, {24, SHIFT, 60}, {40, SHIFT, 121}, {42, SHIFT, 122}, {45, SHIFT, 87}, {46, SHIFT, 123}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 133}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 135}, {1, SHIFT, 161}, {22, SHIFT, 133}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 137}, {1, SHIFT, 163}, {22, SHIFT, 133}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 153}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, ERROR, 154}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 157}, {0, SHIFT, 86}, {45, SHIFT, 87}, {46, SHIFT, 88}, {47, SHIFT, 89}, {48, SHIFT, 90}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 164}, {1, SHIFT, 168}, {22, SHIFT, 133}, },
			{{-1, ERROR, 165}, {1, SHIFT, 169}, },
			{{-1, ERROR, 166}, {1, SHIFT, 170}, },
			{{-1, ERROR, 167}, {21, SHIFT, 171}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 169}, {4, SHIFT, 100}, },
			{{-1, ERROR, 170}, {4, SHIFT, 100}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 58}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 8}, },
			{{-1, 9}, {10, 17}, },
			{{-1, 24}, },
			{{-1, 10}, },
			{{-1, 11}, {9, 16}, {12, 18}, },
			{{-1, 12}, },
			{{-1, 13}, {36, 40}, {43, 40}, {44, 52}, {50, 52}, },
			{{-1, 34}, {7, 15}, {13, 19}, {25, 31}, },
			{{-1, 21}, {22, 28}, },
			{{-1, 33}, },
			{{-1, 38}, {45, 54}, },
			{{-1, 35}, {37, 45}, },
			{{-1, 26}, },
			{{-1, 78}, {68, 79}, {80, 97}, },
			{{-1, 75}, {66, 76}, },
			{{-1, 66}, },
			{{-1, 67}, {60, 68}, {69, 80}, {82, 99}, },
			{{-1, 62}, {70, 81}, {100, 124}, {131, 124}, },
			{{-1, 47}, },
			{{-1, 41}, {43, 49}, },
			{{-1, 63}, {64, 73}, },
			{{-1, 71}, {81, 98}, },
			{{-1, 83}, },
			{{-1, 101}, {169, 172}, {170, 173}, },
			{{-1, 42}, {44, 53}, {50, 53}, },
			{{-1, 125}, {131, 159}, },
			{{-1, 126}, },
			{{-1, 127}, },
			{{-1, 128}, },
			{{-1, 129}, {77, 91}, {86, 102}, {103, 137}, {105, 138}, {106, 139}, {107, 140}, {133, 160}, {153, 165}, {154, 166}, {157, 167}, },
			{{-1, 92}, {108, 141}, {109, 142}, {110, 143}, {111, 144}, {112, 145}, {113, 146}, },
			{{-1, 93}, {114, 147}, {115, 148}, },
			{{-1, 94}, {116, 149}, {117, 150}, {118, 151}, },
			{{-1, 95}, {100, 130}, {119, 152}, {131, 130}, },
			{{-1, 104}, },
			{{-1, 134}, {135, 162}, {164, 162}, },
			{{-1, 96}, },
			{{-1, 43}, },
			{{-1, 44}, {43, 50}, },
			{{-1, 22}, },
			{{-1, 131}, },
			{{-1, 135}, {137, 164}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '++', '--', '##', '+', '-', '#', 'use'",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: '++', '--', '##', '+', '-', '#'",
			"expecting: '++', '--', '##', '+', '-', '#', EOF",
			"expecting: '{', ';', ',', ':', '.', '<', 'as'",
			"expecting: ';', 'as'",
			"expecting: '{', ':', '<'",
			"expecting: ';'",
			"expecting: '{', ':'",
			"expecting: '{'",
			"expecting: '{', ','",
			"expecting: '}', '++', '--', '##', '+', '-', '#'",
			"expecting: '(', ':'",
			"expecting: ')', ':', identifier",
			"expecting: '(', identifier",
			"expecting: '('",
			"expecting: ':'",
			"expecting: ')', ','",
			"expecting: ')'",
			"expecting: ')', '[', '{', ';', ',', ':='",
			"expecting: ';', ':='",
			"expecting: ')', ';', ',', ':='",
			"expecting: ':', identifier",
			"expecting: ']'",
			"expecting: ')', '{', ';', ',', ':='",
			"expecting: '(', string, identifier, float sequence, digit sequence",
			"expecting: ')', ';', ','",
			"expecting: ')', '+', '-', '*', '/', ';', ',', ':=', '%', '&', '|', '^', '.', '=', '!=', '<=', '<', '>=', '>'",
			"expecting: '(', ')', '+', '-', '*', '/', ';', ',', ':=', '%', '&', '|', '^', '.', '=', '!=', '<=', '<', '>=', '>'",
			"expecting: ')', ';', ',', '&', '|', '^'",
			"expecting: ')', ';', ',', '&', '|', '^', '=', '!=', '<=', '<', '>=', '>'",
			"expecting: ')', '+', '-', ';', ',', '&', '|', '^', '=', '!=', '<=', '<', '>=', '>'",
			"expecting: ')', '+', '-', '*', '/', ';', ',', '%', '&', '|', '^', '=', '!=', '<=', '<', '>=', '>'",
			"expecting: '(', '}', ':', 'if', 'while', string, identifier, float sequence, digit sequence",
			"expecting: '(', ')', string, identifier, float sequence, digit sequence",
			"expecting: '(', '}', '++', '--', '##', '+', '-', '#', ':', 'if', 'while', string, identifier, float sequence, digit sequence",
			"expecting: '(', '+', '-', '*', '/', ';', ':=', ':', '%', '&', '|', '^', '.', '=', '!=', '<=', '<', '>=', '>'",
			"expecting: '+', '-', '*', '/', ';', ':=', '%', '&', '|', '^', '=', '!=', '<=', '<', '>=', '>'",
			"expecting: ')', '+', '-', '*', '/', ';', ',', ':=', '%', '&', '|', '^', '=', '!=', '<=', '<', '>=', '>'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 1, 1, 1, 1, 2, 3, 0, 2, 4, 1, 5, 6, 2, 3, 2, 7, 1, 5, 5, 1, 8, 1, 9, 5, 5, 8, 0, 9, 1, 10, 11, 11, 12, 1, 10, 4, 1, 12, 12, 12, 12, 11, 13, 8, 4, 12, 12, 4, 1, 12, 10, 14, 15, 12, 4, 16, 15, 17, 18, 19, 14, 20, 20, 21, 22, 15, 23, 19, 9, 19, 24, 25, 25, 26, 8, 27, 22, 18, 15, 10, 20, 25, 26, 28, 29, 28, 28, 27, 30, 31, 32, 33, 28, 27, 19, 10, 34, 12, 18, 35, 28, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 36, 16, 16, 37, 8, 34, 34, 34, 34, 8, 38, 34, 28, 26, 18, 18, 28, 18, 27, 27, 27, 30, 30, 30, 30, 30, 30, 31, 31, 32, 32, 32, 39, 26, 26, 34, 34, 26, 36, 34, 18, 28, 18, 28, 18, 19, 19, 8, 28, 10, 10, 34, 34, 34, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
